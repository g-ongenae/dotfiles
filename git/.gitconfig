[user]
  name = Guillaume Ongenae
  email = guillaume.ongenae@algoan.com

[github]
  user = g-ongenae

[gitlab]
  user = g-ongenae

[bitbucket]
  user = g_ongenae

[help]
  autocorrect = 1                                   # Automatically correct and execute mistyped commands

[credential]
  helper = cache                                    # Cache the http credentials

[alias]
  ## Basic
  i = init
  sm = submodule
  t = tag

  ## Commit...
  a = add
  c = commit
    # Commit with committizen (git-cz)
  cz = "!sh -c \"cd "$(git root || echo .)" ; [ -f package.json ] && npm run commit || make commit ; cd - 1> /dev/null\""
  co = checkout
    # Checkout a branch from a specific remote (by default origin/develop)
  ct = "!sh -c \"git checkout --track "${1:-origin}/${2:-develop}"\" -"
  cp = cherry-pick
  r = rebase
    # Rebase head branch in interactive mode (most likely master or main)
  rih = "!sh -c \"git rebase -i "$(git head-name)"\" -"
    # Create a "WIP" commit, commiting all the changes without running hooks
  wip = "!sh -c \"git add . && git commit -n -m "WIP ${1}"\" -"
  unwip = reset --mixed HEAD~1                      # Undo a "WIP" commit, staging the changes

  ## Branch
  b = branch
    # Create a [b]ack[u]p of the current branch (useful to create before a merge or rebase)
  bu = "!sh -c \"git branch -c "backup/$(git rev-parse --abbrev-ref HEAD)"\" -"
    # Remove all merged branch of the current repository
  bd = "!sh -c \"git branch --merged | grep -i -v -E 'master|main|develop' | xargs git branch -d\" -"
  cu = rev-parse --abbrev-ref HEAD                  # Get the current branch name (cu for current)
    # Get the default (HEAD) branch of the current repository
  head = "!sh -c \"git checkout "$(git head-name)"\" -"
  head-name = "!sh -c \"git remote show origin | grep -E 'Branche HEAD :|HEAD branch:|Hauptbranch:' | cut -d':' -f2\" -"
    # Create a new feature branch
  feat = "!sh -c \"git checkout "$(git head-name)" ; \
    git pull origin "$(git head-name)" ; \
    git checkout -b "feature/${1}"\" -"
    # Create a new hotfix branch
  hotfix = "!sh -c \"git checkout "$(git head-name)" ; \
    git pull origin "$(git head-name)" ; \
    git checkout -b "hotfix/${1}"\" -"
  m = merge
    # Print the last commit of each branch, order by date, source: https://stackoverflow.com/a/30076212
  recent = "!sh -c \"git for-each-ref --sort=-committerdate refs/heads \
    --format='%(HEAD)%(refname:short)|%(committerdate:relative)|%(subject)|%(authorname)' \
    | column -ts '|'\" -"
  sw = switch
  w = worktree
    # Open VSCode on a new worktree (of current repository) in a temporary folder
  wa = "!f() { local DIR ; DIR=\"$(mktemp -d)\" ; git worktree add \"${DIR}\" \"${1:-master}\" ; open -a 'visual studio code' \"${DIR}\" ; }; f"

  ## Info
  ci = "!sh -c \"hub ci-status HEAD\""              # Show the status of the last commit on the CI
  dw = !git --no-pager diff --word-diff             # To show diff by words
  df = diff                                         # To show diff
  stat = !git --no-pager diff --stat                # Show statistics about the changes (nb lines, etc.)
  h = help
  l = !git --no-pager log --oneline -n 10           # Show last ten commits by their title and SHA
    # Print all the log with the graph, source: http://www.jukie.net/bart/blog/pimping-out-git-log
  lg = log --graph --all --pretty=format:'%Cred%h%Creset - %s %Cgreen(%cr) %C(bold blue)%an%Creset %C(yellow)%d%Creset'
  log = log -n 10
  s = status -sb                                    # Show git status in short format with branch name
  sh = show --pretty=""

  ## With remote
    # List all of the branches on the remote (ex: git br [remote])
  br = "!sh -c \"git ls-remote -q --heads \"${1:-origin}\" | sed -nE 's/^.{30,}refs\\/heads\\/(.+)$/\\1/p'\" -"
  cl = clone --recurse-submodules
  fe = fetch
  pl = "!sh -c \"git pull "${1:-origin}" "$(git rev-parse --abbrev-ref HEAD)"\" -"
  ps = "!sh -c \"git push "${1:-origin}" "$(git rev-parse --abbrev-ref HEAD)"\" -"
    # Push and create the current branch to the [remote] (e.g. git pu mine, default origin)
  pu = "!sh -c \"git push --set-upstream "${1:-origin}" "$(git rev-parse --abbrev-ref HEAD)"\" -"
    # Push force the current branch to the [remote] (e.g. git pu mine, default origin)
  pf = "!sh -c \"git push --force "${1:-origin}" "$(git rev-parse --abbrev-ref HEAD)"\" -"
    # Checkout a PR (ex: git pr <pr-number> [remote])
  pr = "!sh -c \"git fetch -fu "${2:-origin}" "refs/pull/${1}/head:pr/${1}" && git checkout "pr/${1}"\" -"
  re = remote
    # Add remote for the fork (from GitHub user and directory name of the repository)
  re-fork = "!sh -c 'git remote add \"$(git config --global --get github.user)\" \
    \"git@github.com:$(git config --global --get github.user)/${PWD##*/}.git\"'"

  ## Stash commands
  apply = stash apply                               # Apply the stash and keep it in the stash history
  ls = stash list                                   # List all stash
  pop = stash pop                                   # Apply and drop the stash
  sa = stash save --include-untracked               # Stash all the files in the repository
  sf = stash push --                                # Stash file, only those given <files>
    # Show the content of the [nth] stash
  ss = "!sh -c \"git stash show -p stash@{"${1:-'0'}"}\" -"
    # Drop the content of the [nth] stash
  sd = "!sh -c \"git stash drop stash@{"${1:-'0'}"}\" -"

  ## Clean commands
  amend = commit --amend                            # Correct a commit (need -m for message or -a <file>)
  d = "!sh -c \"git rebase --onto '$1^' '$1'\" -"   # To delete a commit based on its SHA
  dl = "!sh -c \"git reset HEAD~'$1'\" -"           # To delete last [n] commits
  fix = commit --amend --no-edit                    # Make change to the last commit (need git add <file>)
  rs = restore
  rv = revert
  unst = checkout -- HEAD                           # Unstage changes
  unst-hard = reset --hard HEAD                     # Unstage changes and throw

  ## Bisection
  bi = bisect                                       # Run with start or run
  bid = bisect bad                                  # Please do not make a "bide"
  big = bisect good                                 # Man, it's good, that's big!

  ## Miscellaneous
    # Remove the git lock - see: https://stackoverflow.com/questions/7860751
  unlock = "!sh -c \"rm -f "$(git rev-parse --show-toplevel || echo .)/.git/index.lock"\""
  fork = "!sh -c \"gh repo fork "$(git config --get remote.origin.url)"\""
  f = flow                                          # For gitflow, see: https://github.com/nvie/gitflow
  k = "!sh -c \"open -a 'github desktop'\""         # To open GitHub Desktop, name k for gitk
  root = rev-parse --show-toplevel                  # Get root directory of the current git repository
    # Open the current repository remote
  open = "!sh -c \"git remote get-url origin | sed -e 's#:#/#' -e 's#git@#https:////#' | xargs open\" -"
  ok = "!sh -c \"sl\""                              # Slow down, you wanted to write "g pl" (git pull)

# Rewrite url http://bit.ly/g9c9Y2 (allows: git clone gh:rails/rails)
[url "git@github.com:"]
  insteadOf = "gh:"

[url "git@github.com:"]
  pushInsteadOf = "https://github.com/"
  pushInsteadOf = "http://github.com/"
  pushInsteadOf = "gh:"

[url "git@github.com:g-ongenae/"]
  pushInsteadOf = "my:"

[url "git@github.com:g-ongenae/"]
  insteadOf = "my:"

[url "https://gist.github.com/"]
  insteadOf = "gist:"

[url "git@gist.github.com:"]
  pushInsteadOf = "https://gist.github.com/"
  pushInsteadOf = "http://gist.github.com/"
  pushInsteadOf = "gist:"

[hub]
  protocol = ssh

[pull]
  ff = only

[rerere]
  enabled = true

[init]
  defaultBranch = master

[color]
  ui = auto

[color "branch"]
  current = yellow reverse
  local = yellow
  remote = green

[color "diff"]
  meta = yellow bold
  frag = magenta bold
  old = red bold
  new = green bold

[color "status"]
  added = yellow
  changed = green
  untracked = cyan

[color "diff-highlight"]
  oldNormal = red bold
  oldHighlight = red bold 52
  newNormal = green bold
  newHighlight = green bold 22

[filter "lfs"]
  clean = git-lfs clean -- %f
  smudge = git-lfs smudge -- %f
  process = git-lfs filter-process
  required = true

[core]
  pager = delta                                     # Use https://github.com/dandavison/delta
  excludesfile = "~/Documents/prog/dotfiles/git/.gitignore_global"
  editor = code --wait

[diff]
  colorMoved = default

[interactive]
  diffFilter = delta --color-only

[delta]
  features = side-by-side line-numbers decorations
  syntax-theme = Dracula
  plus-style = syntax "#003800"
  minus-style = syntax "#3f0001"

[delta "decorations"]
  commit-decoration-style = bold yellow box ul
  file-style = bold yellow ul
  file-decoration-style = none
  hunk-header-decoration-style = cyan box ul

[delta "line-numbers"]
  line-numbers-left-style = cyan
  line-numbers-right-style = cyan
  line-numbers-minus-style = 124
  line-numbers-plus-style = 28

# Options for Git Plus (https://github.com/tkrajina/git-plus)
[multi]
  groupbyoutput = 1
